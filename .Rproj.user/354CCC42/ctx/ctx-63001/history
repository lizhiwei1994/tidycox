) %>%
mutate(date = as.Date(date)) %>%
as_tibble()
df
library(tidycox)
df %>% group_by(id) %>%
mutate(time = cox.time(date = date, outcome = outcome))
library(tidycox)
df %>% group_by(id) %>%
mutate(time = cox.time(date = date, outcome = outcome))
library(dplyr)
df = data.frame(
id = c(1,1,1,1, 2,2,2,2, 3,3,3,3, 4,4,4,4),
date = c('2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01',
'2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01',
'2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01',
'2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01'),
outcome = c(0,0,1,1, 0,1,0,0, 1,1,0,0, 0,0,0,0)
) %>%
mutate(date = as.Date(date)) %>%
group_by(id) %>%
mutate(fllow_up = row_number()) %>%
ungroup() %>%
as_tibble()
df
library(dplyr)
df = data.frame(
id = c(1,1,1,1, 2,2,2,2, 3,3,3,3, 4,4,4,4),
date = c('2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01',
'2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01',
'2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01',
'2013-01-01', '2014-01-01', '2015-01-01', '2016-01-01'),
outcome = c(0,0,1,1, 0,1,0,0, 1,1,0,0, 0,0,0,0)
) %>%
mutate(date = as.Date(date)) %>%
group_by(id) %>%
mutate(follow_up = row_number()) %>%
ungroup() %>%
as_tibble()
df
df %>% group_by(id) %>%
mutate(time = cox.time(date = follow_up, outcome = outcome))
?cox.formula
y = 'Surv(time, event)'
x = 'x_interest'
covars = c('covars_1', 'covars_2', 'covars_3')
cox.formula(y = y, x = x, covars = covars)
y = 'Surv(time, event)'
x = 'x_interest'
x.covars = c('covars_1', 'covars_2', 'covars_3')
cox.formula(y = y, x = x, x.covars = x.covars)
?surv
?Surv
library(survival)
?Surv
frailty = '(1|random_intercept_var)'
cox.formula(y = y, x = x, x.covars = x.covars, frailty = frailty)
?broom::tidy
?coxph
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a stratified model
coxph(Surv(time, status) ~ x + strata(sex), test1)
test1 = as_tibble(test1 )
test1
test1$sex = as.factor(test1$sex)
test1
coxph(Surv(time, status) ~ x + sex, test1)
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
library(tidycox)
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
document()
load_all()
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
document()
load_all()
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
cox.result(model_1)
library(coxme)
?coxme
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
y = 'Surv(time, status)'
x = 'x_interest'
x.covars = c('covars_1', 'covars_2', 'covars_3')
cox.formula(y = y, x = x, x.covars = x.covars)
document()
use_package('stringr')
devtools::install_github('lizhiwei1994/tidycox')
check()
use_package('broom')
check()
install_github('lizhiwei1994/tidycox')
library(survival)
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
document()
library(survival)
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
colnames()
install_github('lizhiwei1994/tidycox')
rm(list = ls())
devtools::check()
library(devtools)
library(usethis)
install()
library(survival)
# Create the simplest test data set
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a coxph model
model_1 = coxph(Surv(time, status) ~ x , test1)
cox.result(model_1)
library(coxme)
?coxme
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/",
out.width = "100%",
warning = FALSE,
cache = TRUE
)
library(coxme)
# Fit a coxme model
model_2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
library(coxme)
# Fit a coxme model
model_2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
broom::tidy(model_2)
cox.result(model_2)
cox.result(model_2)
fit <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
if(!class(fit) %in% c('coxph', 'coxme'))
formula.terms =
if(class(fit) == 'coxph'){
as.character(fit$formula)
} else {
as.character(fit$formula)[1] %>%
str_split(pattern = '(?<=~)\\s|\\s(?=~)') %>%
unlist() %>%
`[`(c(2,1,3))
}
formula.terms
formula.terms =
if(class(fit) == 'coxph'){
as.character(fit$formula)
} else {
as.character(fit$formula)[1] %>%
str_split(pattern = '(?<=~)\\s|\\s(?=~)') %>%
unlist() %>%
`[`(c(2,1,3))
}
library(stringr)
if(!class(fit) %in% c('coxph', 'coxme'))
if(!class(fit) %in% c('coxph', 'coxme'))
if(!class(fit) %in% c('coxph', 'coxme'))
stop('class(fit) is not a coxph or coxme ')
formula.terms =
if(class(fit) == 'coxph'){
as.character(fit$formula)
} else {
as.character(fit$formula)[1] %>%
str_split(pattern = '(?<=~)\\s|\\s(?=~)') %>%
unlist() %>%
`[`(c(2,1,3))
}
formula.terms
air.pollution = formula.terms[3] %>% stringr::str_extract('[\\w\\.]+')
air.pollution
model.result0 = tidy(fit)
#
fit
#
fit$coefficients
#
fit$coefficients
fit2 <- coxph(Surv(time, status) ~ ph.ecog + age, lung)
fit2
t = tidy(fit2)
t = brrom::tidy(fit2)
t = broom::tidy(fit2)
t
fit <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
fit
fit$y
fit$formulaList
term = fit$terms
term
class(term)
estimate = fit$coefficients
estimate
class(estimate)
fit
fit$variance
fit
std.error = fit$scale
fit$scale
fit$frail
fit$hmat
fit$penalty
fit$loglik
fit$df
fit$iter
fit$control
fit$u
fit$means
fit$scale
fit$linear.predictor
fit$vcoef
fit$n
fit$terms
fit$ties
fit
summary(fit)
p = summary(fit)
p$coefficients
exp(0.47319522)
p$frail
p$loglik
fit$penalty
fit$loglik
fit$df
fit$iter
fit$control
fit$u
fit$means
fit$scale
fit$linear.predictor
fit$vcoef
extract_coxme_table <- function (mod){
beta <- mod$coefficients$fixed
nvar <- length(beta)
nfrail <- nrow(mod$var) - nvar
se <- sqrt(diag(mod$var)[nfrail + 1:nvar])
z<- round(beta/se, 2)
p<- signif(1 - pchisq((beta/se)^2, 1), 2)
table=data.frame(cbind(beta,se,z,p))
return(table)
}
extract_coxme_table(fit)
extract_coxme_table <- function (mod){
beta <- fixef(mod)
nvar <- length(beta)
nfrail <- nrow(mod$var) - nvar
se <- sqrt(diag(mod$var)[nfrail + 1:nvar])
z<- round(beta/se, 2)
p<- signif(1 - pchisq((beta/se)^2, 1), 2)
table=data.frame(cbind(beta,se,z,p))
return(table)
}
extract_coxme_table(fit)
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = rownames(table)
table=c(term, table)
return(table)
}
extract_coxme_table(fit)
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = as.character(rownames(table))
table=c(term, table)
return(table)
}
extract_coxme_table(fit)
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
# term = as.character(rownames(table))
# table=c(term, table)
return(table)
}
extract_coxme_table(fit)
dd =extract_coxme_table(fit)
dd
names(dd)
rownames(dd)
class(rownames(dd))
rn = class(rownames(dd))
dd
cbind(rn, dd)
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = rownames(table)
table=cbind(term, table)
return(table)
}
extract_coxme_table(fit)
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = rownames(table)
table=as_tibble(cbind(term, table))
return(table)
}
dd =extract_coxme_table(fit)
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = rownames(table)
table=cbind(term, table)
return(table)
}
dd =extract_coxme_table(fit)
dd
fit <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
fit
if(!class(fit) %in% c('coxph', 'coxme'))
stop('class(fit) is not a coxph or coxme ')
formula.terms =
if(class(fit) == 'coxph'){
as.character(fit$formula)
} else {
as.character(fit$formula)[1] %>%
str_split(pattern = '(?<=~)\\s|\\s(?=~)') %>%
unlist() %>%
`[`(c(2,1,3))
}
air.pollution = formula.terms[3] %>% stringr::str_extract('[\\w\\.]+')
model.result0 =
if(class(fit) == 'coxph'){
tidy(fit)
} else {
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = rownames(table)
table=cbind(term, table)
return(table)
}
extract_coxme_table(fit)
}
model.result0
model.result1 = model.result0 %>%
mutate(
HR = exp(estimate),
HR.LOW = exp(estimate - 1.96*std.error),
HR.UP  = exp(estimate + 1.96*std.error),
HR.POS = ifelse(HR >= 1, 'positive', 'negative'),
p.sig = ifelse(p.value <= 0.05, 'yes', 'no'),
x.vars = air.pollution) %>%
filter(grepl(air.pollution, term)) %>%
select(x.vars, term, HR.POS, p.sig, estimate, std.error, HR:HR.UP, p.value)
document()
use_package('coxme')
document()
check()
install_github('lizhiwei1994/tidycox')
model_2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
broom::tidy(model_2)
cox.result(model_2)
library(coxme)
# Fit a coxme model
model_2 <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
# broom::tidy(model_2)
cox.result(model_2)
fit <- coxme(Surv(time, status) ~ ph.ecog + age + (1|inst), lung)
cox.result(fit)
if(!class(fit) %in% c('coxph', 'coxme'))
stop('class(fit) is not a coxph or coxme ')
formula.terms =
if(class(fit) == 'coxph'){
as.character(fit$formula)
} else {
as.character(fit$formula)[1] %>%
str_split(pattern = '(?<=~)\\s|\\s(?=~)') %>%
unlist() %>%
`[`(c(2,1,3))
}
formula.terms
air.pollution = formula.terms[3] %>% stringr::str_extract('[\\w\\.]+')
air.pollution
model.result0 =
if(class(fit) == 'coxph'){
tidy(fit)
} else {
extract_coxme_table <- function (mod){
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = rownames(table)
table=cbind(term, table)
return(table)
}
extract_coxme_table(fit)
}
model.result0
model.result1 = model.result0 %>%
mutate(
HR = exp(estimate),
HR.LOW = exp(estimate - 1.96*std.error),
HR.UP  = exp(estimate + 1.96*std.error),
HR.POS = ifelse(HR >= 1, 'positive', 'negative'),
p.sig = ifelse(p.value <= 0.05, 'yes', 'no'),
x.vars = air.pollution) %>%
filter(grepl(air.pollution, term)) %>%
select(x.vars, term, HR.POS, p.sig, estimate, std.error, HR:HR.UP, p.value)
model.result1
model.result1
load_all()
cox.result(fit = fit)
cox.result(fit = fit)
mod = fit
estimate <- fixef(mod)
mod = fit
estimate <- fixef(mod)
nvar <- length(estimate)
nfrail <- nrow(mod$var) - nvar
std.error <- sqrt(diag(mod$var)[nfrail + 1:nvar])
statistic<- round(estimate/std.error, 2)
p.value<- signif(1 - pchisq((estimate/std.error)^2, 1), 2)
table=data.frame(cbind(estimate,std.error,statistic,p.value))
term = rownames(table)
table=cbind(term, table)
return(table)
table
document()
check()
